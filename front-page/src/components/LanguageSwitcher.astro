---
import { getAvailableLanguages, getLangFromUrl } from '../i18n/config';
import { getLanguageSwitcherData } from '../i18n/utils';

const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const availableLanguages = getAvailableLanguages();

// Only show if more than one language is available
const showSwitcher = availableLanguages.length > 1;

if (!showSwitcher) return null;

// Map of language codes to display names
const languageNames: Record<string, string> = {
  en: 'English',
  es: 'Espa√±ol',
  corp: 'üíº Corporate',
  pirate: 'üè¥‚Äç‚ò†Ô∏è Pirate'
};

// Generate proper URLs based on current routing
const languageData = availableLanguages.map(targetLang => {
  let url = currentPath;
  
  // Normalize path - ensure it ends with / for consistency
  const normalizedPath = currentPath.endsWith('/') ? currentPath : currentPath + '/';
  
  // Check if we're on a language-prefixed route
  const langMatch = normalizedPath.match(/^\/([a-z]+)\/(.*)?$/);
  
  if (langMatch && availableLanguages.includes(langMatch[1])) {
    // We're on a language route, extract the page path after the language
    const pagePath = langMatch[2] || '';
    
    if (targetLang === 'en') {
      // English doesn't use prefix for main pages
      url = pagePath ? `/${pagePath}` : '/';
    } else {
      // Other languages use prefix
      url = `/${targetLang}/${pagePath}`;
    }
  } else {
    // We're on a default (English) route
    const cleanPath = currentPath === '/' ? '' : currentPath.replace(/^\//, '');
    
    if (targetLang === 'en') {
      url = currentPath;
    } else {
      url = `/${targetLang}/${cleanPath}`;
    }
  }
  
  // Clean up double slashes and ensure proper formatting
  url = url.replace(/\/+/g, '/');
  if (url !== '/' && url.endsWith('/')) {
    url = url.slice(0, -1);
  }
  
  return {
    code: targetLang,
    name: languageNames[targetLang] || targetLang.toUpperCase(),
    url,
    current: targetLang === currentLang
  };
});
---

{showSwitcher && (
  <div class="language-switcher">
    <button 
      class="lang-button" 
      aria-label="Change language"
      aria-expanded="false"
    >
      <span class="current-lang">{currentLang.toUpperCase()}</span>
      <span class="lang-icon">üåê</span>
    </button>
    
    <div class="lang-dropdown">
      {languageData.map((lang) => (
        <a 
          href={lang.url}
          class={`lang-option ${lang.current ? 'active' : ''}`}
          aria-current={lang.current ? 'page' : undefined}
        >
          <span class="lang-code">{lang.code.toUpperCase()}</span>
          <span class="lang-name">{lang.name}</span>
        </a>
      ))}
    </div>
  </div>
)}

<style>
  .language-switcher {
    position: relative;
    z-index: 200;
  }
  
  .lang-button {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-xs) var(--space-sm);
    background: var(--ink-black);
    border: 2px solid var(--mustard-gold);
    border-radius: 4px;
    color: var(--mustard-gold);
    font-weight: 900;
    font-size: var(--font-scale-sm);
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .lang-button:hover {
    background: var(--mustard-gold);
    color: var(--ink-black);
  }
  
  .current-lang {
    font-family: 'Courier New', monospace;
  }
  
  .lang-icon {
    font-size: 1.2em;
  }
  
  .lang-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: var(--space-xs);
    background: var(--ink-black);
    border: 2px solid var(--mustard-gold);
    border-radius: 4px;
    min-width: 200px;
    max-height: 400px;
    overflow-y: auto;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
  
  .language-switcher:hover .lang-dropdown,
  .language-switcher:focus-within .lang-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .lang-option {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-sm);
    color: var(--vintage-cream);
    text-decoration: none;
    transition: all 0.2s ease;
    border-bottom: 1px solid var(--ink-soft);
  }
  
  .lang-option:last-child {
    border-bottom: none;
  }
  
  .lang-option:hover {
    background: var(--mustard-gold);
    color: var(--ink-black);
  }
  
  .lang-option.active {
    background: var(--rust-orange);
    color: var(--vintage-cream);
  }
  
  .lang-code {
    font-family: 'Courier New', monospace;
    font-weight: 900;
    font-size: var(--font-scale-sm);
  }
  
  .lang-name {
    font-size: var(--font-scale-xs);
    opacity: 0.8;
  }
  
  /* Mobile responsive */
  @media (max-width: 768px) {
    .lang-dropdown {
      right: auto;
      left: 0;
    }
  }
</style>

<script>
  // Add keyboard navigation
  const switcher = document.querySelector('.language-switcher');
  const button = document.querySelector('.lang-button');
  const dropdown = document.querySelector('.lang-dropdown');
  
  if (button && dropdown) {
    // Toggle with Enter/Space
    button.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        const expanded = button.getAttribute('aria-expanded') === 'true';
        button.setAttribute('aria-expanded', (!expanded).toString());
        dropdown.style.opacity = expanded ? '0' : '1';
        dropdown.style.visibility = expanded ? 'hidden' : 'visible';
      }
    });
    
    // Close with Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        button.setAttribute('aria-expanded', 'false');
        dropdown.style.opacity = '0';
        dropdown.style.visibility = 'hidden';
      }
    });
  }
</script>